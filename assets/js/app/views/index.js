// Generated by CoffeeScript 1.6.2
(function() {
  define(['backbone'], function(Backbone) {
    var IndexView;

    return IndexView = Backbone.View.extend({
      tumblrPage: 0,
      initialize: function() {
        _.bindAll(this);
        return this.getTumblr();
      },
      getInstagram: function() {
      		var token = 5725120139.4de2eb0.d716395e1cd7453da234aed6cce5b8c5,
   		 userid = 5725120139,
    		num_photos = 1; // how much photos do you want to get
 
$.ajax({
	url: 'https://api.instagram.com/v1/users/self/media/recent',
	dataType: 'jsonp',
	type: 'GET',
	data: {access_token: token, count: num_photos},
	success: function(data){
 		console.log(data);
		for( x in data.data ){
			$('ul').append('<li><img src="'+data.data[x].images.low_resolution.url+'"></li>'); // data.data[x].images.low_resolution.url - URL of image, 306х306
			// data.data[x].images.thumbnail.url - URL of image 150х150
			// data.data[x].images.standard_resolution.url - URL of image 612х612
			// data.data[x].link - Instagram post URL 
		}
	},
	error: function(data){
		console.log(data); // send the error notifications to console
	}
});
        
      getTumblr: function(offset) {
        if (offset == null) {
          offset = 0;
        }
        this.currentTumblr = 0;
        return $.ajax({
          url: 'http://api.tumblr.com',
          dataType: 'jsonp',
          type: 'GET',
          data: {
            api_key: "YgpsEXCrpCtKL9U7aNBzWeDp0sSbZw1AeZQSt5QgsXRLdb5o24",
            limit: 50,
            offset: Number(offset)
          },
          success: this.haveTumblrData
        });
      },
      tumblrTemplate: _.template("<a href=\"<%= link_url %>\" target=\"_blank\">\n	<div class=\"image\">\n		<img src=\"<%= photos[0].original_size.url %>\" />\n	</div>\n</a>"),
      haveTumblrData: function(data) {
        var _this = this;

        _.each(this.$('.tumblr-empty'), function(el, index) {
          var $el, post;

          $el = $(el);
          post = data.response.posts[index];
          if (post === void 0) {
            return;
          }
          $el.append(_this.tumblrTemplate(post));
          $el.find('.preloader').remove();
          return $el.removeClass('tumblr-empty');
        });
        if (this.$('.tumblr-empty').length > 0) {
          return this.getTumblr(this.currentTumblr + 1);
        }
      },
      getSvpply: function() {
        return $.ajax({
          type: 'GET',
          dataType: 'jsonp',
          url: 'https://api.svpply.com/v1/users/jarred/wants/products.json?callback=?',
          success: this.haveSvpplyData
        });
      },
      svpplyTemplate: _.template("<a href=\"<%= page_url %>\" target=\"_blank\">\n	<div class=\"image\">\n		<img src=\"<%= image %>\" />\n	</div>\n	<div class=\"info\">\n		<h3><%= page_title %></h3>\n		<h4>from <em><%= store.name %></em></h4>\n	</div>\n</a>"),
      haveSvpplyData: function(data) {
        var _this = this;

        return _.each(this.$('.svpply'), function(el, index) {
          var $el, post;

          $el = $(el);
          post = data.response.products[index];
          $el.append(_this.svpplyTemplate(post));
          return $el.find('.preloader').remove();
        });
      }
    });
  });

}).call(this);
